<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on Trojan-Go Docs</title>
    <link>https://azadzadeh.github.io/trojan-go/en/</link>
    <description>Recent content in Introduction on Trojan-Go Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://azadzadeh.github.io/trojan-go/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Basic introduction</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/overview/</guid>
      <description>The core parts of Trojan-Go are
tunnel Specific implementation of each protocol
proxy proxy core
config configuration registration and parsing module
redirector Active spoof detection module
statistics user authentication and statistics module
The source code can be found in the corresponding folder.
tunnel.Tunnel tunnel Trojan-Go abstracts all protocols (including routing functions, etc.) into tunnels (tunnel.Tunnel interface), each of which can be opened with a server (tunnel.Server interface) and a client (tunnel.</description>
    </item>
    
    <item>
      <title>Enabling multiplexing to improve network concurrency performance</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/mux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/mux/</guid>
      <description>Compatibility Note that Trojan does not support this feature
Trojan-Go supports the use of multiplexing to improve network concurrency performance.
The Trojan protocol is based on TLS, and before a secure TLS connection can be established, both sides of the connection need to negotiate and exchange keys to ensure the security of the subsequent communication. This process is known as the TLS handshake.
The GFW currently censors and interferes with the TLS handshake, and due to egress network congestion, it usually takes nearly a second or more for an ordinary line to complete the TLS handshake.</description>
    </item>
    
    <item>
      <title>CDN forwarding and resisting man-in-the-middle attacks using Websocket</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/websocket/</guid>
      <description>Compatibility Note that Trojan does not support this feature
Trojan-Go supports using TLS+Websocket to host the Trojan protocol, making it possible to relay traffic using CDNs.
The Trojan protocol itself is not encrypted and relies on the outer layer of TLS for security, but once the traffic passes through the CDN, TLS is transparent to the CDN. Its service provider can review the plaintext content of the TLS. If you are using an untrusted CDN (any CDN service registered and filed in mainland China should be considered untrusted), please make sure to turn on Shadowsocks AEAD to encrypt Webosocket traffic to avoid being identified and censored.</description>
    </item>
    
    <item>
      <title>Domestic direct connection and ad blocking</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/router/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/router/</guid>
      <description>Compatibility Note that Trojan does not support this feature Trojan-Go&amp;rsquo;s built-in routing module can help you implement domestic direct connections, i.e., the client can connect directly to domestic websites without going through a proxy. The routing module can be configured with three policies (bypass, proxy, block) on the client side, and only the block policy can be used on the server side. Here is an example { &amp;#34;run_type&amp;#34;: &amp;#34;client&amp;#34;, &amp;#34;local_addr&amp;#34;:</description>
    </item>
    
    <item>
      <title>Tunnels and reverse proxies</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/forward/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/forward/</guid>
      <description>You can use Trojan-Go to set up tunnels. A typical application is to use Trojan-Go to set up a local, unpolluted DNS server, here is an example configuration
{ &amp;#34;run_type&amp;#34;: &amp;#34;forward&amp;#34;, &amp;#34;local_addr&amp;#34;: &amp;#34;127.0.0.1&amp;#34;, &amp;#34;local_port&amp;#34;: 53, &amp;#34;remote_addr&amp;#34;: &amp;#34;your_awesome_server&amp;#34;, &amp;#34;remote_port&amp;#34;: 443, &amp;#34;target_addr&amp;#34;: &amp;#34;8.8.8.8&amp;#34;, &amp;#34;target_port&amp;#34;: 53, &amp;#34;password&amp;#34;: [ &amp;#34;your_awesome_password&amp;#34; ] } forward is essentially a client, but you need to fill in the target_addr and target_port fields to indicate the target of the reverse proxy.</description>
    </item>
    
    <item>
      <title>A multi-path split relaying scheme based on SNI proxy</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/nginx-relay/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/nginx-relay/</guid>
      <description>Preface Trojan is a tool for encrypted data transmission through TLS encapsulation. By using its TLS feature, we can achieve different paths of relaying on the same host port through SNI proxy.
Required tools and other preparations Relay machine: nginx version 1.11.5 and above Landing machine: trojan server (no version required) Configuration method For the sake of illustration, two relay hosts and two landing hosts are used here. The four hosts are bound to the domain name (a/b/c/d).</description>
    </item>
    
    <item>
      <title>Using Shadowsocks Plugin/Pluggable Transport Layer</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/plugin/</guid>
      <description>Compatibility Note that Trojan does not support this feature
Trojan-Go supports a pluggable transport layer. In principle, Trojan-Go can use any software that has TCP tunneling capabilities as a transport layer, such as v2ray, shadowsocks, kcp, etc. Also, Trojan-Go is compatible with Shadowsocks&amp;rsquo; SIP003 plugin standard, such as GoQuiet, v2ray-plugin, etc. You can also use Tor&amp;rsquo;s transport layer plugins, such as obfs4, meek, etc.
You can use these plugins to replace the TLS transport layer of Trojan-Go.</description>
    </item>
    
    <item>
      <title>Custom Protocol Stack</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/customize-protocol-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/customize-protocol-stack/</guid>
      <description>Compatibility Note that Trojan does not support this feature
Trojan-Go allows advanced users to customize the protocol stack. In custom mode, Trojan-Go will relinquish control of the protocol stack and allow users to manipulate the underlying protocol stack combinations. For example:
Creating one or more layers of TLS encryption on top of one layer of TLS
Use TLS to transport Websocket traffic, build another layer of TLS on top of the Websocket layer, and then use Shadowsocks AEAD on top of the second layer of TLS for encrypted transport</description>
    </item>
    
    <item>
      <title>Secondary encryption with Shadowsocks AEAD</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/aead/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/aead/</guid>
      <description>Compatibility Note that Trojan does not support this feature
The Trojan protocol itself is not encrypted and its security relies on the underlying TLS. in general, TLS security is good and there is no need to encrypt Trojan traffic again. However, there are some scenarios where you may not be able to guarantee the security of a TLS tunnel.
You use a Websocket, relayed through an untrusted CDN (e.g. a domestic CDN)</description>
    </item>
    
    <item>
      <title>Compiling and customizing Trojan-Go</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/build/</guid>
      <description>Compilation requires Go version number higher than 1.14.x. Please check your compiler version before compiling. It is recommended to use snap to install and update go.
The compilation is very simple and can be done using the Makefile preset steps
make make install #Install systemd services etc., optional Or you can compile directly using Go:
go build -tags &amp;#34;full&amp;#34; #compile full version You can specify the target OS and architecture for cross-compilation by specifying the GOOS and GOARCH environment variables, for example</description>
    </item>
    
    <item>
      <title>Managing users dynamically using the API</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/api/</guid>
      <description>Compatibility Note that Trojan does not support this feature
Trojan-Go provides a set of APIs using gRPC, which supports the following features.
user information addition, deletion, and checking
traffic statistics
speed statistics
IP connection statistics
Trojan-Go itself has integrated API control, i.e. you can use one Trojan-Go instance to control another Trojan-Go server.
You need to add API settings to the configuration of the server you need to be controlled, e.</description>
    </item>
    
    <item>
      <title>Transparent Proxy</title>
      <link>https://azadzadeh.github.io/trojan-go/en/advance/nat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/advance/nat/</guid>
      <description>Compatibility Note that Trojan does not fully support this feature (UDP)
Trojan-Go supports transparent TCP/UDP proxies based on tproxy.
To enable transparent proxy mode, change run_type to nat in a proper client configuration (see the basic configuration section for how to configure it) and modify the local listening port as required.
After that you need to add iptables rules. Assuming that your gateway has two NICs, this configuration below forwards inbound packets from one of the NICs (LAN) to Trojan-Go, which sends them through a tunnel to the remote Trojan-Go server via the other NIC (Internet).</description>
    </item>
    
    <item>
      <title>Trojan Protocol</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/trojan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/trojan/</guid>
      <description>Trojan-Go follows the original trojan protocol, the exact format of which can be found in the Trojan documentation and will not be repeated here.
By default, the trojan protocol is carried using TLS, and the protocol stack is as follows.
Protocol Real Traffic Trojan TLS TCP </description>
    </item>
    
    <item>
      <title>Trojan fundamentals</title>
      <link>https://azadzadeh.github.io/trojan-go/en/basic/trojan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/basic/trojan/</guid>
      <description>This page will briefly describe the basics of how the Trojan protocol works. If you are not interested in how GFW and Trojan work, you can skip this section. However, for better security of your communication and node concealment, I recommend you read it.
Why Shadowsocks (with streaming passwords) is vulnerable to blocking Firewalls in the early days simply intercepted and censored outbound traffic, i.e. passive detection. Shadowsocks&amp;rsquo; encryption protocol was designed so that the transmitted packets themselves had almost no signature and appeared similar to a completely random stream of bits, which did work to bypass GFWs in the early days.</description>
    </item>
    
    <item>
      <title>Configuring Trojan-Go correctly</title>
      <link>https://azadzadeh.github.io/trojan-go/en/basic/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/basic/config/</guid>
      <description>The following section will describe how to properly configure Trojan-Go to completely hide your proxy node features.
Before you start, you need
A server that is not blocked by GFW
A domain name, you can use a free domain name service such as .tk
Trojan-Go, which can be downloaded from the release page
Certificates and keys, which can be issued for free from agencies such as letsencrypt
Server-side configuration Our goal is to make your server behave the same as a normal HTTPS site.</description>
    </item>
    
    <item>
      <title>Full configuration file</title>
      <link>https://azadzadeh.github.io/trojan-go/en/basic/full-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/basic/full-config/</guid>
      <description>The following is a complete configuration file with the required options
run_type
local_addr
local_port
remote_addr
remote_port
For server server，key and certare required.
For the client client, the reverse proxy tunnel forward, and the transparent proxy nat, password is required
The rest of the unfilled options are filled with the values given below.
Trojan-Go supports the more human-friendly YAML syntax, and the basic structure of the configuration file is the same as JSON, with equivalent effects.</description>
    </item>
    
    <item>
      <title>Multiplexing</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/mux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/mux/</guid>
      <description>Trojan-Go uses smux to implement multiplexing. The simplesocks protocol is also implemented for proxy transfers.
When multiplexing is enabled, the client first initiates a TLS connection, using the normal trojan protocol format, but filling in 0x7f (protocol.Mux) in the Command section of the protocol, identifying the connection as a multiplexed connection (similar to the upgrade of http), after which the connection is handed over to the smux client for management. After the server receives the request header, it is handed over to the smux server to parse all traffic for the connection.</description>
    </item>
    
    <item>
      <title>Websocket</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/websocket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/websocket/</guid>
      <description>Since HTTPS is transparent to the CDN when using CDN transit, the CDN can review the content of the Websocket transfer. The Trojan protocol itself is transmitted in clear text, so to ensure security, a layer of Shadowsocks AEAD encryption layer can be added to obfuscate traffic characteristics and ensure security.
Caution If you are using a CDN provided by an operator in China, please make sure to turn on AEAD encryption.</description>
    </item>
    
    <item>
      <title>SimpleSocks Protocol</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/simplesocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/simplesocks/</guid>
      <description>SimpleSocks protocol is a simple proxy protocol with no authentication mechanism, essentially Trojan protocol with sha224 removed. The purpose of using this protocol is to reduce the overhead when multiplexing.
Only when multiplexing is enabled, the connections being multiplexed will use this protocol. That is, SimpleSocks is always carried by SMux.
SimpleSocks is even simpler than Socks5, here is the header structure.
+-----+------+----------+----------+-----------+ | CMD | ATYP | DST.ADDR | DST.</description>
    </item>
    
    <item>
      <title>API Development</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/api/</guid>
      <description>Trojan-Go implements an API based on gRPC, using protobuf to exchange data. The client can get the traffic and speed information; the server can get the traffic, speed, online situation of each user, and dynamically add and delete users and limit the speed. The API module can be activated by adding the api option to the configuration file. Here is an example, the meaning of each field can be found in the section Full configuration file.</description>
    </item>
    
    <item>
      <title>Pluggable transport layer plug-in development</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/plugin/</guid>
      <description>Trojan-Go encourages the development of transport layer plugins to enrich protocol types and increase the strategic depth of the fight against GFW.
The role of transport layer plugins is to replace TLS in tansport tunnels for transport encryption and obfuscation.
The plug-in communicates with Trojan-Go based on TCP Socket, there is no coupling with Trojan-Go itself, and you can use any language and design pattern you like for development. We recommend developing with reference to the SIP003 standard.</description>
    </item>
    
    <item>
      <title>URL scheme (draft)</title>
      <link>https://azadzadeh.github.io/trojan-go/en/developer/url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://azadzadeh.github.io/trojan-go/en/developer/url/</guid>
      <description>Changelog encryption format to ss;method:password Overview Thanks to @DuckSoft @StudentMain @phlinhng for discussing and contributing to the Trojan-Go URL scheme. The URL scheme is currently a draft and needs more practice and discussion.
Trojan-Go client can accept URLs to locate server resources. The principles are as follows:
Comply with URL format specifications
Ensure human readability and machine friendliness
The purpose of URLs is to locate Trojan-Go node resources and facilitate resource sharing</description>
    </item>
    
  </channel>
</rss>
